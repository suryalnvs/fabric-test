# Copyright the Hyperledger Fabric contributors. All rights reserved.
#
# SPDX-License-Identifier: Apache-2.0


name: $(SourceBranchName)-$(Date:yyyyMMdd)$(Rev:.rrr)
trigger:
- k8s-azure-pipelines
pr: none

variables:
  GOPATH: $(Agent.BuildDirectory)/go
  PATH: $(Agent.BuildDirectory)/go/bin:$(Agent.BuildDirectory)/go/src/github.com/hyperledger/fabric-test/fabric/.build/bin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin
  GO_VER: 1.13.4
  NODE_VER: 10.x
  #PYTHON_VER: 3.x
  KUBE_PATH: $(kubeconfig.secureFilePath)

stages:
- stage: Operator_k8s_network
  displayName: NetworkLaunch  # friendly name to display in the UI
  pool: vms
    #vmImage: ubuntu-18.04
  jobs:
  - job: NetworkLaunch
    steps:
    - template: templates/install_deps.yml
    - checkout: self
      path: 'go/src/github.com/hyperledger/fabric-test'
      displayName: Checkout Fabric Test Code
    - task: KubectlInstaller@0
      displayName: Kubectl installer
      inputs: 
        kubectlVersion: 1.13.1
    - task: DownloadSecureFile@1
      name: kubeconfig # The name with which to reference the secure file's path on the agent, like $(mySecureFile.secureFilePath)
      inputs:
        secureFile: kube-config-wdc07-community-longrun.yml
    - task: DownloadSecureFile@1
      name: cacert
      inputs:
        secureFile: ca-wdc07-community-longrun.pem
    - script: |
          wget https://hyperledger.jfrog.io/hyperledger/fabric-binaries/hyperledger-fabric-linux-amd64-2.0.0-stable.tar.gz
          tar -xzvf hyperledger-fabric-linux-amd64-2.0.0-stable.tar.gz -C $(Agent.BuildDirectory)/go/
      displayName: BinariesDownload
    - script: |
          cd tools/operator
          echo $KUBE_PATH
          go run main.go -i testdata/smoke-network-spec.yml -k $KUBE_PATH -a up
      displayName: Network launch
    - publish: 'tools/operator/configFiles'
      artifact: configFiles
    - publish: 'tools/operator/channel-artifacts'
      artifact: channelArtifacts
    - publish: 'tools/operator/crypto-config'
      artifact: certificates
    - publish: 'tools/operator/connection-profile'
      artifact: 'connection-profiles'

- stage: Operator_k8s_admin_actions
  displayName: Test Client Admin Actions  # friendly name to display in the UI
  dependsOn:
  - Operator_k8s_network
  condition: succeeded()
  pool: vms
  jobs:
  - job: Admin_actions
    steps:
    - template: templates/install_deps.yml
    - checkout: self
      path: 'go/src/github.com/hyperledger/fabric-test'
      displayName: Checkout Fabric Test Code
    - task: DownloadPipelineArtifact@2
      inputs:
        source: current
        artifact: channelArtifacts
        path: tools/operator/channel-artifacts
    - task: DownloadPipelineArtifact@2
      inputs:
        source: current
        artifact: certificates
        path: tools/operator/crypto-config
    - task: DownloadPipelineArtifact@2
      inputs:
        source: current
        artifact: connection-profiles
        path: tools/operator/connection-profile
    - script: |
        cd tools/PTE
        npm install
      displayName: NPM install
    - script: |
        cd tools/operator
        go run main.go -i testdata/smoke-test-input.yml -a create
      displayName: Create Channel
    - script: |
        cd tools/operator
        go run main.go -i testdata/smoke-test-input.yml -a join
      displayName: Join Channel
    - script: |
        wget https://hyperledger.jfrog.io/hyperledger/fabric-binaries/hyperledger-fabric-linux-amd64-2.0.0-stable.tar.gz
        tar -xzvf hyperledger-fabric-linux-amd64-2.0.0-stable.tar.gz -C $(Agent.BuildDirectory)/go/
      displayName: BinariesDownload
    - script: |
        set -x
        export FABRIC_CFG_PATH=$GOPATH/config/
        export CORE_PEER_LOCALMSPID=Org1ExampleCom
        export CORE_PEER_TLS_ENABLED=true
        export CORE_PEER_MSPCONFIGPATH="$PWD/tools/operator/crypto-config/peerOrganizations/org1/users/Admin@org1/msp"
        export CORE_PEER_TLS_ROOTCERT_FILE="$PWD/tools/operator/crypto-config/peerOrganizations/org1/peers/peer0-org1.org1/tls/ca.crt"
        export CLUSTER_IP=169.62.57.123
        peer lifecycle chaincode package samplecc.tar.gz --path github.com/hyperledger/fabric-test/chaincodes/samplecc/go --label samplecc_1
        peer lifecycle chaincode install samplecc.tar.gz --peerAddresses $CLUSTER_IP:31000 --orderer $CLUSTER_IP:30000 --tlsRootCertFiles $PWD/tools/operator/crypto-config/peerOrganizations/org1/peers/peer0-org1.org1/tls/ca.crt --tls --cafile $PWD/tools/operator/crypto-config/ordererOrganizations/ordererorg1/orderers/orderer0-ordererorg1.ordererorg1/tls/ca.crt --ordererTLSHostnameOverride orderer0-ordererorg1
        peer lifecycle chaincode queryinstalled --peerAddresses $CLUSTER_IP:31000 --tlsRootCertFiles $PWD/tools/operator/crypto-config/peerOrganizations/org1/peers/peer0-org1.org1/tls/ca.crt --tls > output.txt
        PACKAGE_ID=$(cat output.txt | sed -n '1!p' | sed -e 's/^Package ID: //' -e 's/,.*//')
        peer lifecycle chaincode approveformyorg --channelID testorgschannel0 --name samplecc --version 1 --package-id ${PACKAGE_ID} --sequence 1 --waitForEvent --peerAddresses $CLUSTER_IP:31000 --orderer $CLUSTER_IP:30000 --tlsRootCertFiles $PWD/tools/operator/crypto-config/peerOrganizations/org1/peers/peer0-org1.org1/tls/ca.crt --tls --cafile $PWD/tools/operator/crypto-config/ordererOrganizations/ordererorg1/orderers/orderer0-ordererorg1.ordererorg1/tls/ca.crt --ordererTLSHostnameOverride orderer0-ordererorg1
      displayName: Installing Chaincode on org1
    - script: |
        set -x
        export FABRIC_CFG_PATH=$GOPATH/config/
        export CORE_PEER_LOCALMSPID=Org2ExampleCom
        export CORE_PEER_TLS_ENABLED=true
        export CORE_PEER_MSPCONFIGPATH="$PWD/tools/operator/crypto-config/peerOrganizations/org2/users/Admin@org2/msp"
        export CORE_PEER_TLS_ROOTCERT_FILE="$PWD/tools/operator/crypto-config/peerOrganizations/org2/peers/peer0-org2.org2/tls/ca.crt"
        export CLUSTER_IP=169.62.57.123
        peer lifecycle chaincode package samplecc.tar.gz --path github.com/hyperledger/fabric-test/chaincodes/samplecc/go --label samplecc_1
        peer lifecycle chaincode install samplecc.tar.gz --peerAddresses $CLUSTER_IP:31001 --orderer $CLUSTER_IP:30000 --tlsRootCertFiles $PWD/tools/operator/crypto-config/peerOrganizations/org2/peers/peer0-org2.org2/tls/ca.crt --tls --cafile $PWD/tools/operator/crypto-config/ordererOrganizations/ordererorg1/orderers/orderer0-ordererorg1.ordererorg1/tls/ca.crt --ordererTLSHostnameOverride orderer0-ordererorg1
        peer lifecycle chaincode queryinstalled --peerAddresses $CLUSTER_IP:31001 --tlsRootCertFiles $PWD/tools/operator/crypto-config/peerOrganizations/org2/peers/peer0-org2.org2/tls/ca.crt --tls > output.txt
        PACKAGE_ID=$(cat output.txt | sed -n '1!p' | sed -e 's/^Package ID: //' -e 's/,.*//')
        peer lifecycle chaincode approveformyorg --channelID testorgschannel0 --name samplecc --version 1 --package-id ${PACKAGE_ID} --sequence 1 --waitForEvent --peerAddresses $CLUSTER_IP:31001 --orderer $CLUSTER_IP:30000 --tlsRootCertFiles $PWD/tools/operator/crypto-config/peerOrganizations/org2/peers/peer0-org2.org2/tls/ca.crt --tls --cafile $PWD/tools/operator/crypto-config/ordererOrganizations/ordererorg1/orderers/orderer0-ordererorg1.ordererorg1/tls/ca.crt --ordererTLSHostnameOverride orderer0-ordererorg1
      displayName: Installing Chaincode on org2
    - script: |
        set -x
        export FABRIC_CFG_PATH=$GOPATH/config/
        export CORE_PEER_LOCALMSPID=Org1ExampleCom
        export CORE_PEER_TLS_ENABLED=true
        export CORE_PEER_MSPCONFIGPATH="$PWD/tools/operator/crypto-config/peerOrganizations/org1/users/Admin@org1/msp"
        export CORE_PEER_TLS_ROOTCERT_FILE="$PWD/tools/operator/crypto-config/peerOrganizations/org1/peers/peer0-org1.org1/tls/ca.crt"
        export CLUSTER_IP=169.62.57.123
        peer lifecycle chaincode commit --channelID testorgschannel0 --name samplecc --version 1 --init-required --sequence 1 --peerAddresses $CLUSTER_IP:31000 --orderer $CLUSTER_IP:30000 --tlsRootCertFiles $PWD/tools/operator/crypto-config/peerOrganizations/org1/peers/peer0-org1.org1/tls/ca.crt --tls --cafile $PWD/tools/operator/crypto-config/ordererOrganizations/ordererorg1/orderers/orderer0-ordererorg1.ordererorg1/tls/ca.crt --ordererTLSHostnameOverride orderer0-ordererorg1
      displayName: Instantiating Chaincode
    # - script: |
    #     cd tools/operator
    #     go run main.go -i testdata/smoke-test-input.yml -a install
    #   displayName: Install Chaincode
    # - script: |
    #     cd tools/operator
    #     go run main.go -i testdata/smoke-test-input.yml -a instantiate
    #   displayName: Instantiate Chaincode
    - publish: 'tools/operator/connection-profile'
      artifact: 'connection-profiles-updated'

- stage: Operator_k8s_queries
  displayName: queries  # friendly name to display in the UI
  dependsOn:
  - Operator_k8s_network
  - Operator_k8s_admin_actions
  condition: succeeded()
  pool: vms
  jobs:
  - job: Queries
    steps:
    - template: templates/install_deps.yml
    - checkout: self
      path: 'go/src/github.com/hyperledger/fabric-test'
      displayName: Checkout Fabric Test Code
    - task: DownloadPipelineArtifact@2
      inputs:
        source: current
        artifact: connection-profiles
        path: tools/operator/connection-profile
    - script: |
        cd tools/PTE
        npm install
      displayName: NPM install
    - script: |
        cd tools/operator
        go run main.go -i testdata/smoke-test-input.yml -a query
      displayName: Queries

- stage: Operator_k8s_invokes1
  displayName: invokes1  # friendly name to display in the UI
  dependsOn:
  - Operator_k8s_network
  - Operator_k8s_admin_actions
  - Operator_k8s_queries
  condition: succeeded()
  pool: vms
  jobs:
  - job: Invokes
    steps:
    - template: templates/install_deps.yml
    - checkout: self
      path: 'go/src/github.com/hyperledger/fabric-test'
      displayName: Checkout Fabric Test Code
    - task: DownloadPipelineArtifact@2
      inputs:
        source: current
        artifact: connection-profiles-updated
        path: tools/operator/connection-profile
    - script: |
        cd tools/PTE
        npm install
      displayName: NPM install
    - script: |
        cd tools/operator
        go run main.go -i testdata/smoke-test-input.yml -a invoke
      displayName: Invokes

- stage: Operator_k8s_invokes2
  displayName: invokes2 # friendly name to display in the UI
  dependsOn:
  - Operator_k8s_network
  - Operator_k8s_admin_actions
  - Operator_k8s_queries
  condition: succeeded()
  pool: vms
  jobs:
  - job: Invokes
    steps:
    - template: templates/install_deps.yml
    - checkout: self
      path: 'go/src/github.com/hyperledger/fabric-test'
      displayName: Checkout Fabric Test Code
    - task: DownloadPipelineArtifact@2
      inputs:
        source: current
        artifact: connection-profiles
        path: tools/operator/connection-profile
    - script: |
        cd tools/PTE
        npm install
      displayName: NPM install
    - script: |
        cd tools/operator
        go run main.go -i testdata/smoke-test-input.yml -a invoke
      displayName: Invokes

- stage: Operator_k8s_invokes3
  displayName: invokes3  # friendly name to display in the UI
  dependsOn:
  - Operator_k8s_network
  - Operator_k8s_admin_actions
  - Operator_k8s_queries
  condition: succeeded()
  pool: vms
  jobs:
  - job: Invokes
    steps:
    - template: templates/install_deps.yml
    - checkout: self
      path: 'go/src/github.com/hyperledger/fabric-test'
      displayName: Checkout Fabric Test Code
    - task: DownloadPipelineArtifact@2
      inputs:
        source: current
        artifact: connection-profiles
        path: tools/operator/connection-profile
    - script: |
        cd tools/PTE
        npm install
      displayName: NPM install
    - script: |
        cd tools/operator
        go run main.go -i testdata/smoke-test-input.yml -a invoke
      displayName: Invokes

- stage: Operator_k8s_invokes4
  displayName: invokes4 # friendly name to display in the UI
  dependsOn:
  - Operator_k8s_network
  - Operator_k8s_admin_actions
  - Operator_k8s_queries
  condition: succeeded()
  pool: vms
  jobs:
  - job: Invokes
    steps:
    - template: templates/install_deps.yml
    - checkout: self
      path: 'go/src/github.com/hyperledger/fabric-test'
      displayName: Checkout Fabric Test Code
    - task: DownloadPipelineArtifact@2
      inputs:
        source: current
        artifact: connection-profiles
        path: tools/operator/connection-profile
    - script: |
        cd tools/PTE
        npm install
      displayName: NPM install
    - script: |
        cd tools/operator
        go run main.go -i testdata/performa-test-input.yml -a invoke
      displayName: Invokes

- stage: Operator_k8s_invokes5
  displayName: invokes5 # friendly name to display in the UI
  dependsOn:
  - Operator_k8s_network
  - Operator_k8s_admin_actions
  - Operator_k8s_queries
  condition: succeeded()
  pool: vms
  jobs:
  - job: Invokes
    steps:
    - template: templates/install_deps.yml
    - checkout: self
      path: 'go/src/github.com/hyperledger/fabric-test'
      displayName: Checkout Fabric Test Code
    - task: DownloadPipelineArtifact@2
      inputs:
        source: current
        artifact: connection-profiles
        path: tools/operator/connection-profile
    - script: |
        cd tools/PTE
        npm install
      displayName: NPM install
    - script: |
        cd tools/operator
        go run main.go -i testdata/smoke-test-input.yml -a invoke
      displayName: Invokes

# - stage: Operator_k8s_invokes6
#   displayName: invokes6 # friendly name to display in the UI
#   dependsOn:
#   - Operator_k8s_network
#   - Operator_k8s_admin_actions
#   - Operator_k8s_queries
#   condition: succeeded()
#   pool:
#     vmImage: ubuntu-18.04
#   jobs:
#   - job: Invokes
#     steps:
#     - template: templates/install_deps.yml
#     - checkout: self
#       path: 'go/src/github.com/hyperledger/fabric-test'
#       displayName: Checkout Fabric Test Code
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         source: current
#         artifact: connection-profiles
#         path: tools/operator/connection-profile
#     - script: |
#         cd tools/PTE
#         npm install
#       displayName: NPM install
#     - script: |
#         cd tools/operator
#         go run main.go -i testdata/smoke-test-input.yml -a invoke
#       displayName: Invokes

# - stage: Operator_k8s_invokes7
#   displayName: invokes7 # friendly name to display in the UI
#   dependsOn:
#   - Operator_k8s_network
#   - Operator_k8s_admin_actions
#   - Operator_k8s_queries
#   condition: succeeded()
#   pool:
#     vmImage: ubuntu-18.04
#   jobs:
#   - job: Invokes
#     steps:
#     - template: templates/install_deps.yml
#     - checkout: self
#       path: 'go/src/github.com/hyperledger/fabric-test'
#       displayName: Checkout Fabric Test Code
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         source: current
#         artifact: connection-profiles
#         path: tools/operator/connection-profile
#     - script: |
#         cd tools/PTE
#         npm install
#       displayName: NPM install
#     - script: |
#         cd tools/operator
#         go run main.go -i testdata/smoke-test-input.yml -a invoke
#       displayName: Invokes

# - stage: Operator_k8s_invokes8
#   displayName: invokes8 # friendly name to display in the UI
#   dependsOn:
#   - Operator_k8s_network
#   - Operator_k8s_admin_actions
#   - Operator_k8s_queries
#   condition: succeeded()
#   pool:
#     vmImage: ubuntu-18.04
#   jobs:
#   - job: Invokes
#     steps:
#     - template: templates/install_deps.yml
#     - checkout: self
#       path: 'go/src/github.com/hyperledger/fabric-test'
#       displayName: Checkout Fabric Test Code
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         source: current
#         artifact: connection-profiles
#         path: tools/operator/connection-profile
#     - script: |
#         cd tools/PTE
#         npm install
#       displayName: NPM install
#     - script: |
#         cd tools/operator
#         go run main.go -i testdata/smoke-test-input.yml -a invoke
#       displayName: Invokes

# - stage: Operator_k8s_invokes9
#   displayName: invokes9 # friendly name to display in the UI
#   dependsOn:
#   - Operator_k8s_network
#   - Operator_k8s_admin_actions
#   - Operator_k8s_queries
#   condition: succeeded()
#   pool:
#     vmImage: ubuntu-18.04
#   jobs:
#   - job: Invokes
#     steps:
#     - template: templates/install_deps.yml
#     - checkout: self
#       path: 'go/src/github.com/hyperledger/fabric-test'
#       displayName: Checkout Fabric Test Code
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         source: current
#         artifact: connection-profiles
#         path: tools/operator/connection-profile
#     - script: |
#         cd tools/PTE
#         npm install
#       displayName: NPM install
#     - script: |
#         cd tools/operator
#         go run main.go -i testdata/smoke-test-input.yml -a invoke
#       displayName: Invokes

# - stage: Operator_k8s_invokes10
#   displayName: invokes10 # friendly name to display in the UI
#   dependsOn:
#   - Operator_k8s_network
#   - Operator_k8s_admin_actions
#   - Operator_k8s_queries
#   condition: succeeded()
#   pool:
#     vmImage: ubuntu-18.04
#   jobs:
#   - job: Invokes
#     steps:
#     - template: templates/install_deps.yml
#     - checkout: self
#       path: 'go/src/github.com/hyperledger/fabric-test'
#       displayName: Checkout Fabric Test Code
#     - task: DownloadPipelineArtifact@2
#       inputs:
#         source: current
#         artifact: connection-profiles
#         path: tools/operator/connection-profile
#     - script: |
#         cd tools/PTE
#         npm install
#       displayName: NPM install
#     - script: |
#         cd tools/operator
#         go run main.go -i testdata/smoke-test-input.yml -a invoke
#       displayName: Invokes

- stage: Operator_k8s_network_delete
  displayName: NetworkDelete  # friendly name to display in the UI
  dependsOn:
  - Operator_k8s_network
  - Operator_k8s_admin_actions
  - Operator_k8s_invokes1
  - Operator_k8s_invokes2
  - Operator_k8s_invokes3
  - Operator_k8s_invokes4
  - Operator_k8s_invokes5
  # - Operator_k8s_invokes6
  # - Operator_k8s_invokes7
  # - Operator_k8s_invokes8
  # - Operator_k8s_invokes9
  # - Operator_k8s_invokes10
  - Operator_k8s_queries
  condition: or(succeeded(), failed())
  pool: vms
  jobs:
  - job: NetworkDelete
    steps:
    - template: templates/install_deps.yml
    - checkout: self
      path: 'go/src/github.com/hyperledger/fabric-test'
      displayName: Checkout Fabric Test Code
    - task: KubectlInstaller@0
      displayName: Kubectl installer
      inputs: 
        kubectlVersion: 1.13.1
    - task: DownloadSecureFile@1
      name: kubeconfig # The name with which to reference the secure file's path on the agent, like $(mySecureFile.secureFilePath)
      inputs:
        secureFile: kube-config-wdc07-community-longrun.yml
    - task: DownloadSecureFile@1
      name: cacert
      inputs:
        secureFile: ca-wdc07-community-longrun.pem
    - task: DownloadPipelineArtifact@2
      inputs:
        source: current
        artifact: configFiles
        path: tools/operator/configFiles
    - script: |
        cd tools/operator
        go run main.go -i testdata/smoke-network-spec.yml -k $KUBE_PATH -a down
      displayName: Network delete